/**
 * Import function triggers from their respective submodules
 */
// Load environment variables from .env file
require('dotenv').config();

const {onRequest, onCall} = require("firebase-functions/v2/https");
const { genkit } = require('genkit');
const googleai = require('@genkit-ai/googleai');
const googleAI = googleai.googleAI || googleai.GoogleGenerativeAI;
const {enableFirebaseTelemetry} = require('@genkit-ai/firebase');
const cors = require('cors');
const corsOptions = require('./src/utils/cors-config');

// Import centralized Firebase initialization
// This ensures Firebase is properly initialized before any other imports
const { admin } = require('./src/utils/firebase-init');

// Enable Firebase telemetry for Genkit
enableFirebaseTelemetry();

// Import our AI service modules - after Firebase is initialized
const fitmentorModern = require('./src/ai/fitmentor-modern');
const fitnessPlanGenerator = require('./src/ai/fitness-plan-generator');

// Get API key from environment variables or .env file
const apiKey = process.env.GENKIT_API_KEY || process.env.GOOGLE_API_KEY;

// Initialize Genkit client with the appropriate API depending on what's available
const genkitClient = genkit({
  plugins: [googleAI({ apiKey })],
  model: 'gemini-1.5-pro'
});

// Enhanced helloWorld function with error handling and diagnostics
exports.helloWorld = onCall({
  cors: true, // Enable CORS
  timeoutSeconds: 30, // 30 seconds timeout
}, async (data) => {
  console.log('helloWorld function called with data:', JSON.stringify(data || {}));
  
  try {
    // Collect diagnostic information
    const diagnostics = {
      timestamp: new Date().toISOString(),
      nodeVersion: process.version,
      functionRegion: process.env.FUNCTION_REGION || 'unknown',
      functionTimeout: 30, // seconds
    };
    
    return {
      message: "Hello from Firebase Functions v2!",
      success: true,
      diagnostics
    };
  } catch (error) {
    // Log the error for serverside diagnostics
    console.error('Error in helloWorld function:', error);
    
    // Return a formatted error that's easier to diagnose
    return {
      message: "Error in helloWorld function",
      success: false,
      error: {
        message: error.message,
        code: error.code || 'unknown',
        // Only include stack trace in development
        stack: process.env.NODE_ENV !== 'production' ? error.stack : undefined
      }
    };
  }
});

// Test Genkit function
exports.askAI = onCall(async (data) => {
  try {
    const question = data.question || "What are the benefits of regular exercise?";
    
    // Use Genkit to generate a response with the new API syntax
    const { text } = await genkitClient.generate(question, {
      systemPrompt: "You are a helpful fitness assistant. Provide accurate and concise information.",
      temperature: 0.3,
      maxOutputTokens: 500,
    });
    
    return {
      answer: text,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error("Error using Genkit:", error);
    throw new Error(`Failed to process your request: ${error.message}`);
  }
});

// Test function to verify AI responses are relevant to questions
exports.testAIResponse = onCall(async (data) => {
  try {
    const question = data.question || "What are the benefits of regular exercise?";
    console.log(`Testing AI with question: "${question}"`);
    
    // Use Genkit to generate a response with the new API syntax
    const { text } = await genkitClient.generate(question, {
      systemPrompt: "You are a helpful fitness assistant. Provide accurate and direct answers to the specific question asked. Do not provide generic pre-written responses.",
      temperature: 0.3,
      maxOutputTokens: 500,
    });
    
    console.log(`AI response: "${text.substring(0, 100)}..."`);
    
    return {
      question: question,
      answer: text,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error("Error testing AI:", error);
    throw new Error(`Failed to process your request: ${error.message}`);
  }
});

// Enhanced testPing function with diagnostics
exports.testPing = onCall({
  cors: true, // Enable CORS for this function
  timeoutSeconds: 60, // Set timeout to 60 seconds
  memory: '256MiB', // Use minimal memory
}, async (data) => {
  try {
    // Log incoming requests for diagnostics
    console.log('testPing called with data:', JSON.stringify(data));
    
    // Get system information for diagnostics
    const systemInfo = {
      nodeVersion: process.version,
      functionRuntime: process.env.FUNCTION_SIGNATURE_TYPE || 'unknown',
      memoryLimit: process.env.FUNCTION_MEMORY_MB || 'unknown',
      region: process.env.FUNCTION_REGION || 'unknown',
      environment: process.env.NODE_ENV || 'unknown'
    };
    
    // Include any input in the response
    const receivedData = data || {};
    
    // Test the database connection if available
    let dbStatus = 'Not tested';
    try {
      if (admin && admin.firestore) {
        // Simple database test - retrieve a document that should always exist
        const testDoc = await admin.firestore().collection('system').doc('status').get();
        dbStatus = testDoc.exists ? 'Connected' : 'Document not found';
      } else {
        dbStatus = 'Admin SDK not available';
      }
    } catch (dbError) {
      dbStatus = `Error: ${dbError.message}`;
    }
    
    // Return comprehensive diagnostic information
    return {
      status: 'success',
      message: 'Firebase Functions diagnostics completed successfully',
      timestamp: new Date().toISOString(),
      system: systemInfo,
      receivedData,
      database: dbStatus
    };
  } catch (error) {
    // Detailed error logging for diagnostics
    console.error('testPing error:', error);
    
    // Instead of throwing, return an error response with details
    return {
      status: 'error',
      message: error.message,
      code: error.code || 'unknown',
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,
      timestamp: new Date().toISOString()
    };
  }
});

// Export the modern AI functions
exports.answerHealthQuestion = fitmentorModern.answerHealthQuestion;
exports.generatePersonalizedPlan = fitnessPlanGenerator.generatePersonalizedPlan;
exports.updateFitnessPlan = fitnessPlanGenerator.updateFitnessPlan;

// Export the Express API app for production use
const expressApp = require('./src/utils/api-server');
exports.app = onRequest({ 
  cors: true, 
  timeoutSeconds: 300,
  minInstances: 0,
  maxInstances: 10
}, expressApp);

// New production-ready function with comprehensive AI personalization
exports.getPersonalizedInsights = onCall(async (data, context) => {
  if (!context.npm run devauth) {
    throw new Error('Authentication required');
  }
  
  try {
    // Call our AI service for personalized insights
    const insights = await fitmentorModern.getPersonalizedInsights(data, context);
    
    // Structure the response with telemetry data for Firebase monitoring
    return {
      insights,
      telemetry: {
        responseTime: Date.now(),
        version: '1.0.0',
        functionName: 'getPersonalizedInsights'
      }
    };
  } catch (error) {
    console.error("Error in getPersonalizedInsights:", error);
    throw new Error(`Failed to get personalized insights: ${error.message}`);
  }
});

